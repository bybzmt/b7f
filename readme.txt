设计思路
1.使用现有功能,不重造轮子
2.程序即:输入和输出
3.严类型

设计层次
1.输入层    用于解除环境绑定,输入层总是执行成功且返回固定格式的数据
2.验证层    验证用户输入有效性
3.动作层    进行业务操作,要么成功要么异常
4.输出层    转换数据为输出所需格式

0.路由层    入口即路由
0.控制层    .....

程序设计为:
AA
AA->AA
AA->AA-->AA
AA->AA-->AA
AA->AA
AA
一切设计的目地是为了复用,将多种状况最后规结为少数状况,而不是相反
所以:
        各种手断            各种手断
多入口------------>各种业务---------->数据库
        过滤/验证           各种逻辑


目录结构说明
--------
|- bin          命令行工具目录
|  |- daemon     守护进程目录
|  |- update     版本升级脚本目录
|- config       配制文件目录
|- src          代码目录
|- tests        单元测试目录
|- var          数据目录 (只有这个目需要写权限)
|  |- cache      文件缓存
|  |- locks      文件锁
|  |- logs       日志文件目录
|  |- tmp        临时文件目录 (外部不可以访问)
|  |- upload     文件上传目录 (web服务器需要配制指向这个目录)
|  |  |- tmp      临时文件目录 (外部可访问)
|- vendors      第3方代码库目录
|- views        模板文件目录
|- webroot      web入口目录
|  |- www        前台入口
|  |- admin      后台入口
